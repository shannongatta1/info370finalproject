# Create your scatterplot matrix here
test <- na.omit(risk.data)
plotmatrix(risk.data[,"alcohol_use":"smoking"])
View(test)
# Create your scatterplot matrix here
test <- na.omit(risk.data)
plotmatrix(test[,"alcohol_use":"smoking"])
# Create your scatterplot matrix here
test <- na.omit(risk.data)
pairs(test[,"alcohol_use":"smoking"])
# Create your scatterplot matrix here
test <- na.omit(risk.data)
pairs(test[,"alcohol_use":"smoking"])
# Create your scatterplot matrix here
test <- na.omit(risk.data)
pairs(test[,8:10])
# Create your scatterplot matrix here
test <- na.omit(risk.data)
pairs(risk.data[,8:10])
# Create your scatterplot matrix here
test <- na.omit(risk.data)
pairs(risk.data[,8:10], alpha=00.2)
# Create your scatterplot matrix here
test <- na.omit(risk.data)
pairs(risk.data[,8:10], col=risk.data$country)
# Create your scatterplot matrix here
test <- na.omit(risk.data)
pairs(risk.data[,8:10], col=risk.data$sex)
# Create your scatterplot matrix here
test <- na.omit(risk.data)
pairs(risk.data[,8:10], col=['black', 'red'])
# Create your scatterplot matrix here
test <- na.omit(risk.data)
pairs(risk.data[,8:10], col=c('black', 'red'))
# Create your scatterplot matrix here
test <- na.omit(risk.data)
pairs(risk.data[,8:12], col=c('black', 'red'))
rm(test)
# Create your scatterplot matrix here
install.packages("GGally")
library(GGally)
test <- na.omit(risk.data)
ggpairs(risk.data, columns = 8:12)
ggpairs(risk.data, columns = 8:12, axisLabels = "show", columnLabels = colnames(data[, columns]))
ggpairs(risk.data, columns = 8:12)
pairs(risk.data[,8:12])
ggpairs(risk.data, columns = 8:12)
pairs(risk.data[,8:12])
ggpairs(risk.data, columns = 8:12)
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age))
}
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age))
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age)) +
labs(x = risk)
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age))
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age)) +
ggtitle(risk)
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age)) +
ggtitle("test")
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age) +
ggtitle("test"))
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age) +
ggtitle(risk))
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_sex <- function(risk) {
return(ggplot(data=risk.data, aes(x = risk.data[[risk]], fill=sex, alpha = 0.2)) +
geom_histogram() +
ggtitle(risk))
}
# Create plot to demonstrate that it works
univariate_sex('alcohol_use')
# Write your function here
univariate_sex <- function(risk) {
return(ggplot(data=risk.data, aes(x = risk.data[[risk]], fill=sex, alpha = 0.2)) +
geom_histogram() +
ggtitle(risk))
}
# Create plot to demonstrate that it works
univariate_sex('high_meat')
# Create your scatterplot matrix here
#install.packages("GGally")
#library(GGally)
#test <- na.omit(risk.data)
#ggpairs(risk.data, columns = 8:12)
pairs(risk.data[,8:12])
# Set up (install packages if you don't have them)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
risk.data <- read.csv('./data/prepped/risk-data.csv', stringsAsFactors = FALSE)
# Size
size <- dim(risk.data)
# Countries
num_countries <- length(unique(risk.data[["country"]]))
# Age groups
age_groups <- unique(risk.data[["age"]])
# Variables (columns)
variables <- colnames(risk.data)
# Data type
data_types <- sapply(risk.data, class)
# Summary
summary <- summary(risk.data)
# Make histograms for each risk column
reshaped <- risk.data %>%
gather(risk, value, alcohol_use:smoking)
ggplot(data=reshaped, aes(reshaped$value)) +
geom_histogram() +
facet_wrap(~risk)
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age) +
ggtitle(risk))
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_sex <- function(risk) {
return(ggplot(data=risk.data, aes(x = risk.data[[risk]], fill=sex, alpha = 0.2)) +
geom_histogram() +
ggtitle(risk))
}
# Create plot to demonstrate that it works
univariate_sex('high_meat')
pairs(risk.data[,8:12])
# Set up (install packages if you don't have them)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(knitr)
risk.data <- read.csv('./data/prepped/risk-data.csv', stringsAsFactors = FALSE)
# Set up (install packages if you don't have them)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
risk.data <- read.csv('./data/prepped/risk-data.csv', stringsAsFactors = FALSE)
rm(list=ls())
install(sandwich)
install('sandwich')
install.packages('sandwich')
install.packages('msm')
library(ggplot2)
library(sandwich)
find(sandwich)
install.packages('sandwich')
install.packages('zoo')
install.packages('sandwich')
install.packages('msm')
install.packages('msm')
library(msm)
library(ggplot2)
library(sandwich)
library(msm)
p <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
p <- within(p, {
prog <- factor(prog, levels=1:3, labels=c("General", "Academic",
"Vocational"))
id <- factor(id)
})
summary(p)
# Set up code block -- don't print ("include") results.
# This is a good place to load data / packages
library(ggplot2)
library(sandwich)
library(msm)
# **Read** the poisson.pdf overview, then
# implement the Poisson regression described in this tutorial:
# https://stats.idre.ucla.edu/r/dae/poisson-regression/
# You should **copy and paste** code from that tutorial (or accomplish
# the same ends using different code, if you prefer).
# Make sure to **add markdown annotation** describing what your code does,
# and how you can interpret the results.
p <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
p <- within(p, {
prog <- factor(prog, levels=1:3, labels=c("General", "Academic",
"Vocational"))
id <- factor(id)
})
summary(p)
p
with(p, tapply(num_awards, prog, function(x) {
sprintf("M (SD) = %1.2f (%1.2f)", mean(x), sd(x))
}))
ggplot(p, aes(num_awards, fill = prog)) +
geom_histogram(binwidth=.5, position="dodge")
with(p, tapply(num_awards, prog, function(x) {
sprintf("M (SD) = %1.2f (%1.2f)", mean(x), sd(x))
}))
ggplot(p, aes(num_awards, fill = prog)) +
geom_histogram(binwidth=.5, position="dodge")
summary(m1 <- glm(num_awards ~ prog + math, family="poisson", data=p))
cov.m1 <- vcovHC(m1, type="HC0")
std.err <- sqrt(diag(cov.m1))
r.est <- cbind(Estimate= coef(m1), "Robust SE" = std.err,
"Pr(>|z|)" = 2 * pnorm(abs(coef(m1)/std.err), lower.tail=FALSE),
LL = coef(m1) - 1.96 * std.err,
UL = coef(m1) + 1.96 * std.err)
r.est
summary(m1 <- glm(num_awards ~ prog + math, family="poisson", data=p))
p <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
p <- within(p, {
prog <- factor(prog, levels=1:3, labels=c("General", "Academic",
"Vocational"))
id <- factor(id)
})
summary(p)
p$phat <- predict(m1, type="response")
## order by program and then by math
p <- p[with(p, order(prog, math)), ]
## create the plot
ggplot(p, aes(x = math, y = phat, colour = prog)) +
geom_point(aes(y = num_awards), alpha=.5, position=position_jitter(h=.2)) +
geom_line(size = 1) +
labs(x = "Math Score", y = "Expected number of awards")
install.packages('tidyverse')
install.packages("tidyverse")
rm(list=ls())
library(ggplot2)
dems <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
setwd("~/Documents/UW/2018-2019/A'18/INFO 370A/info370finalproject")
dems <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
dems[,1]
dems[1,]
library(dplyr)
dems[1,] %>% select(c(16:27))
dems[1,] %>% select(c(16:27)) %>% rowSums(. = 'Neutral')
dems[1,] %>% select(c(16:27)) %>% rowSums(. == 'Neutral')
test <- dems[1,] %>% select(c(16:27))
View(dems)
View(test)
test$Neutral <- rowSums(test == 'Neutral')
test$Neutral <- rowSums(test == 'Netural')
test2 <- dems %>% select(c(16:27))
View(test2)
test2$Neutral <- rowSums(test == 'Netural')
test2$Yes <- rowSums(test == 'Yes')
test2$No <- rowSums(test == 'No')
test2$Neutral <- rowSums(test2 == 'Netural')
test2$Yes <- rowSums(test2 == 'Yes')
test2$No <- rowSums(test2 == 'No')
library(dplyr)
dems <- read.csv('./data/dem_candidates.csv', stringsAsFactors = FALSE)
# Retrieve months from election date
get_month <- function(date) {
parts <- strsplit(date, '/') %>% unlist(.)
return (parts[1])
}
dems$Election.Month <- lapply(dems$Race.Primary.Election.Date, get_month) %>% unlist(.)
# Fill NA's in endorsement columns, Party.Support, Gun.Sense.Candidate, No.Labels.Support
# with "neutral"
endorsement_cols <- grep('.Endorsed', colnames(dems), value = TRUE)
fill_neutral <- function(row) {
if (row == "") {
return ('Neutral')
} else {
return (row)
}
}
for (col in endorsement_cols) {
dems[[col]] <- lapply(dems[[col]], fill_neutral) %>% unlist(.)
}
dems$Party.Support. <- lapply(dems$Party.Support., fill_neutral) %>% unlist(.)
dems$Guns.Sense.Candidate. <- lapply(dems$Guns.Sense.Candidate., fill_neutral) %>% unlist(.)
dems$No.Labels.Support. <- lapply(dems$No.Labels.Support., fill_neutral) %>% unlist(.)
# Race, Veteran, LGBTQ, STEM, <- unknown
fill_unknown <- function(row) {
if (row == "") {
return ('Unknown')
} else {
return (row)
}
}
unknown_cols <- c('Race', 'Veteran.', 'LGBTQ.', 'STEM.')
for (col in unknown_cols) {
dems[[col]] <- lapply(dems[[col]], fill_unknown) %>% unlist(.)
}
# Obama.Alum, Elected.Official <- no
fill_no <- function(row) {
if (row == "") {
return ('No')
} else {
return (row)
}
}
dems$Obama.Alum. <- lapply(dems$Obama.Alum., fill_no) %>% unlist(.)
dems$Elected.Official. <- lapply(dems$Elected.Official., fill_no) %>% unlist(.)
# Remove columns: N/A's, General.Status, Won.Primary, Race.Type, Partisan.Lean
dems$General.Status <- NULL
dems$Won.Primary <- NULL
dems$Race.Type <- NULL
dems$Partisan.Lean <- NULL
dems$Race.Primary.Election.Date <- NULL
# Export CSV
write.csv(dems, file = './data/dem_candidates_prepped.csv', row.names = FALSE)
library(ggplot2)
library(dplyr)
dems <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
# bar chart:
# x-axis - election month
# y-axis - count
# color by primary status
# map:
# fill each state with a different color depending on the month of the election
# pie chart for endorsements: --> facet grid
# number of yes, no, neutral
# bar chart: --> facet grid
# number of yes, no, neutral
# color by primary status
# [row, ]
test <- dems[1,] %>% select(c(16:27))
test$Neutral <- rowSums(test == 'Netural')
count_endorsements <- function(row) {
row <- row %>% select(c(16:27))
row
}
test2 <- dems %>% select(c(16:27))
test2$Neutral <- rowSums(test2 == 'Netural')
test2$Yes <- rowSums(test2 == 'Yes')
test2$No <- rowSums(test2 == 'No')
test2 <- dems %>% select(c(16:27))
test2$Neutral <- rowSums(test2 == 'Neutral')
test2$Yes <- rowSums(test2 == 'Yes')
test2$No <- rowSums(test2 == 'No')
rm(test)
rm(test2)
dems <- dems %>% select(c(16:27))
dems$Neutral <- rowSums(dems == 'Neutral')
dems$Yes <- rowSums(dems == 'Yes')
dems$No <- rowSums(dems == 'No')
yes_endorsements <- dems %>% filter(Yes > 0)
View(yes_endorsements)
rm(count_endorsements)
dems <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
count_endorsements <- dems %>% select(c(16:27))
count_endorsements <- dems %>% select(c(16:27))
count_endorsements$Neutral <- rowSums(count_endorsements == 'Neutral')
count_endorsements$Yes <- rowSums(count_endorsements == 'Yes')
count_endorsements$No <- rowSums(count_endorsements == 'No')
View(count_endorsements)
dems$Neutral <- rowSums(count_endorsements == 'Neutral')
dems$Yes <- rowSums(count_endorsements == 'Yes')
dems$No <- rowSums(count_endorsements == 'No')
yes_endorsements <- dems %>% filter(Yes > 0)
library(ggplot2)
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=count(Primary.Status)))+
geom_bar(width = 1, stat = "identity")
endorsements_bar
yes_endorsements <- dems %>% filter(Yes > 0) %>% group_by(Primary.Status)
View(yes_endorsements)
yes_endorsements <- dems %>% filter(Yes > 0) %>% group_by(Primary.Status) %>% n(Primary.Status)
yes_endorsements <- dems %>% filter(Yes > 0) %>% group_by(Primary.Status) %>% count(Primary.Status)
endorsements_bar <- ggplot(yes_endorsements, aes(x="", y=n))+
geom_bar(width = 1, stat = "identity")
endorsements_bar
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n))+
geom_bar(width = 1, stat = "identity")
endorsements_bar
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n))+
geom_bar()
endorsements_bar
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n))+
geom_bar(stat = "identity")
endorsements_bar
no_endorsements <-
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n))+
geom_bar(stat = "identity", fill=Primary.Status)
no_endorsements <-
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
endorsements_bar
no_endorsements <- dems %>% filter(No > 0) %>% group_by(Primary.Status) %>% count(Primary.Status)
neutral_endorsements <- dems %>% filter(Yes > 0, No > 0) %>%
group_by(Primary.Status) %>%
count(Primary.Status)
yes_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
no_bar <- ggplot(no_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
neutral_bar <- ggplot(neutral_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
rm(endorsements_bar)
no_bar
neutral_bar
dummies <- read.csv('./data/dems_with_dummies.csv', stringsAsFactors = FALSE)
dummies <- read.csv('./data/dem_with_dummies.csv', stringsAsFactors = FALSE)
View(dummies)
write.csv(dems, file = './data/dems_with_endorsement_counts.csv', row.names = FALSE)
View(count_endorsements)
library(ggplot2)
library(dplyr)
dems <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
dummies <- read.csv('./data/dem_with_dummies.csv', stringsAsFactors = FALSE)
# bar chart:
# x-axis - election month
# y-axis - count
# color by primary status
# map:
# fill each state with a different color depending on the month of the election
# pie chart for endorsements: --> facet grid
# number of yes, no, neutral
# bar chart: --> facet grid
# number of yes, no, neutral
# color by primary status
count_endorsements <- dems %>% select(c(16:27))
dems$Neutral.Endorsements <- rowSums(count_endorsements == 'Neutral')
dems$Yes.Endorsements <- rowSums(count_endorsements == 'Yes')
dems$No.Endorsements <- rowSums(count_endorsements == 'No')
write.csv(dems, file = './data/dems_with_endorsement_counts.csv', row.names = FALSE)
yes_endorsements <- dems %>% filter(Yes > 0) %>% group_by(Primary.Status) %>% count(Primary.Status)
no_endorsements <- dems %>% filter(No > 0) %>% group_by(Primary.Status) %>% count(Primary.Status)
neutral_endorsements <- dems %>% filter(Yes > 0, No > 0) %>%
group_by(Primary.Status) %>%
count(Primary.Status)
yes_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
no_bar <- ggplot(no_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
neutral_bar <- ggplot(neutral_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
yes_bar
no_bar
yes_endorsements
yes_bar
no_bar
neutral_bar
yes_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
yes_bar
View(yes_endorsements)
data.frame(yes_endorsements, no_endorsements)
yes_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "Yes" Endorsements')
no_bar <- ggplot(no_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "No" Endorsements')
neutral_bar <- ggplot(neutral_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "Neutral" Endorsements')
yes_bar
yes_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "Yes" Endorsements')+
labs(y='count')
no_bar <- ggplot(no_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "No" Endorsements')+
labs(y='count')
neutral_bar <- ggplot(neutral_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "Neutral" Endorsements')+
labs(y='count')
yes_bar
no_bar
neutral_bar
shiny::runApp('FinalProjectShiny')
