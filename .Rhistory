return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age)) +
labs(x = risk)
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age))
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age)) +
ggtitle(risk)
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age)) +
ggtitle("test")
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age) +
ggtitle("test"))
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age) +
ggtitle(risk))
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_sex <- function(risk) {
return(ggplot(data=risk.data, aes(x = risk.data[[risk]], fill=sex, alpha = 0.2)) +
geom_histogram() +
ggtitle(risk))
}
# Create plot to demonstrate that it works
univariate_sex('alcohol_use')
# Write your function here
univariate_sex <- function(risk) {
return(ggplot(data=risk.data, aes(x = risk.data[[risk]], fill=sex, alpha = 0.2)) +
geom_histogram() +
ggtitle(risk))
}
# Create plot to demonstrate that it works
univariate_sex('high_meat')
# Create your scatterplot matrix here
#install.packages("GGally")
#library(GGally)
#test <- na.omit(risk.data)
#ggpairs(risk.data, columns = 8:12)
pairs(risk.data[,8:12])
# Set up (install packages if you don't have them)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
risk.data <- read.csv('./data/prepped/risk-data.csv', stringsAsFactors = FALSE)
# Size
size <- dim(risk.data)
# Countries
num_countries <- length(unique(risk.data[["country"]]))
# Age groups
age_groups <- unique(risk.data[["age"]])
# Variables (columns)
variables <- colnames(risk.data)
# Data type
data_types <- sapply(risk.data, class)
# Summary
summary <- summary(risk.data)
# Make histograms for each risk column
reshaped <- risk.data %>%
gather(risk, value, alcohol_use:smoking)
ggplot(data=reshaped, aes(reshaped$value)) +
geom_histogram() +
facet_wrap(~risk)
# Write your function here
univariate_age_group <- function(risk) {
return(ggplot(data=risk.data, aes(risk.data[[risk]])) +
geom_histogram() +
facet_wrap(~age) +
ggtitle(risk))
}
# Create a plot to demonstrate that it works
univariate_age_group('drug_use')
# Write your function here
univariate_sex <- function(risk) {
return(ggplot(data=risk.data, aes(x = risk.data[[risk]], fill=sex, alpha = 0.2)) +
geom_histogram() +
ggtitle(risk))
}
# Create plot to demonstrate that it works
univariate_sex('high_meat')
pairs(risk.data[,8:12])
# Set up (install packages if you don't have them)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(knitr)
risk.data <- read.csv('./data/prepped/risk-data.csv', stringsAsFactors = FALSE)
# Set up (install packages if you don't have them)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
risk.data <- read.csv('./data/prepped/risk-data.csv', stringsAsFactors = FALSE)
rm(list=ls())
install(sandwich)
install('sandwich')
install.packages('sandwich')
install.packages('msm')
library(ggplot2)
library(sandwich)
find(sandwich)
install.packages('sandwich')
install.packages('zoo')
install.packages('sandwich')
install.packages('msm')
install.packages('msm')
library(msm)
library(ggplot2)
library(sandwich)
library(msm)
p <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
p <- within(p, {
prog <- factor(prog, levels=1:3, labels=c("General", "Academic",
"Vocational"))
id <- factor(id)
})
summary(p)
# Set up code block -- don't print ("include") results.
# This is a good place to load data / packages
library(ggplot2)
library(sandwich)
library(msm)
# **Read** the poisson.pdf overview, then
# implement the Poisson regression described in this tutorial:
# https://stats.idre.ucla.edu/r/dae/poisson-regression/
# You should **copy and paste** code from that tutorial (or accomplish
# the same ends using different code, if you prefer).
# Make sure to **add markdown annotation** describing what your code does,
# and how you can interpret the results.
p <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
p <- within(p, {
prog <- factor(prog, levels=1:3, labels=c("General", "Academic",
"Vocational"))
id <- factor(id)
})
summary(p)
p
with(p, tapply(num_awards, prog, function(x) {
sprintf("M (SD) = %1.2f (%1.2f)", mean(x), sd(x))
}))
ggplot(p, aes(num_awards, fill = prog)) +
geom_histogram(binwidth=.5, position="dodge")
with(p, tapply(num_awards, prog, function(x) {
sprintf("M (SD) = %1.2f (%1.2f)", mean(x), sd(x))
}))
ggplot(p, aes(num_awards, fill = prog)) +
geom_histogram(binwidth=.5, position="dodge")
summary(m1 <- glm(num_awards ~ prog + math, family="poisson", data=p))
cov.m1 <- vcovHC(m1, type="HC0")
std.err <- sqrt(diag(cov.m1))
r.est <- cbind(Estimate= coef(m1), "Robust SE" = std.err,
"Pr(>|z|)" = 2 * pnorm(abs(coef(m1)/std.err), lower.tail=FALSE),
LL = coef(m1) - 1.96 * std.err,
UL = coef(m1) + 1.96 * std.err)
r.est
summary(m1 <- glm(num_awards ~ prog + math, family="poisson", data=p))
p <- read.csv("https://stats.idre.ucla.edu/stat/data/poisson_sim.csv")
p <- within(p, {
prog <- factor(prog, levels=1:3, labels=c("General", "Academic",
"Vocational"))
id <- factor(id)
})
summary(p)
p$phat <- predict(m1, type="response")
## order by program and then by math
p <- p[with(p, order(prog, math)), ]
## create the plot
ggplot(p, aes(x = math, y = phat, colour = prog)) +
geom_point(aes(y = num_awards), alpha=.5, position=position_jitter(h=.2)) +
geom_line(size = 1) +
labs(x = "Math Score", y = "Expected number of awards")
install.packages('tidyverse')
install.packages("tidyverse")
shiny::runApp('Documents/UW/2018-2019/A'18/INFO 370A/info370finalproject')
setwd("~/Documents/UW/2018-2019/A'18/INFO 370A/info370finalproject")
shiny::runApp()
runApp()
source('~/Documents/UW/2018-2019/A\'18/INFO 370A/info370finalproject/R/office_EDA.R', echo=TRUE)
runApp()
source('~/Documents/UW/2018-2019/A\'18/INFO 370A/info370finalproject/R/office_EDA.R', echo=TRUE)
p_percentage
office_bar
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
subplot(p_percentage, p_percentage_success, nrows=1)
p_percentage
p_percentage_success
office_bar
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Documents/UW/2018-2019/A\'18/INFO 370A/info370finalproject/R/lr_analysis.R', echo=TRUE)
logistic_agg <- dplyr::count(stat_pred, outcome, lr_pred)
library(dplyr)
library(ggplot2)
stat_pred <- read.csv('./data/logistic_test_predictions.csv', stringsAsFactors = FALSE)
logistic_agg <- dplyr::count(stat_pred, outcome, lr_pred)
lr_plot <- ggplot(logistic_agg, aes(outcome, lr_pred, color=n)) +
geom_point( size = (logistic_agg$n)) +
xlim(-.5, 1.5)+ylim(-1, 1.5) +
ggtitle("Number of Logistic Regression Predictions and Outcome Correlations") +
geom_text(aes(label=logistic_agg$n), size=5, color = "white")
lr_plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lr_plot
knn_plot
lr_plot
rfc_plot
runApp()
pred
[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0]
length(c(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0))
scores
scores <- scores[nrow(df) + 1,] = list(4,"LR",0.74)
scores[nrow(df) + 1,] <- list(4,"LR",0.74)
scores
scores
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
scores <- read.csv('./data/model_accuracy_ML.csv', stringsAsFactors = FALSE) %>% select(Model.Type, Score)
ml_pred <- read.csv('./data/model_test_predictions.csv', stringsAsFactors = FALSE)
stat_scores <- read.csv('./data/model_accuracy_stats.csv', stringsAsFactors = FALSE) %>% select(Model.Type, Score)
stat_pred <- read.csv('./data/logistic_test_predictions.csv', stringsAsFactors = FALSE)
scores %>% select(Model.Type)
stat_pred
stat_scores
scores
all_scores <- rbind(scores, stat_scores)
all_scores
all_scores[4]
all_scores[4,]
all_scores[-4,]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length(c(0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
0, 0))
runApp()
runApp()
runApp()
runApp()
runApp()
shinyUI(fluidPage(theme = shinytheme('flatly'),
(navbarPage('The Democratic Primaries 2018',
tabPanel("A Political Shift...",
mainPanel(
includeMarkdown("./md/a_political_shift.md"),
width=11
)),
tabPanel("Meet Our Data",
mainPanel(
includeMarkdown("./md/data_intro.md"),
tags$br(),
htmlOutput('data_preview'),
tags$br(),
includeMarkdown('./md/data_intro_2.md'),
width=11
)),
tabPanel("Get to Know Our Data",
mainPanel(
includeMarkdown('./md/EDA_intro.md'),
tags$br(),
tabsetPanel(
# LGBTQ EDA
tabPanel("LGBTQ",
mainPanel(
includeMarkdown("./md/lgbtq_EDA.md"),
plotOutput('LGBTQ_bar', width = '80%'),
width=12
)
),
# Office EDA
tabPanel("Office Type",
mainPanel(
includeMarkdown("./md/office_EDA.md"),
plotlyOutput('p_percentage'),
includeMarkdown("./md/office_EDA_2.md"),
plotlyOutput('office_pair'),
width=12
)
),
# Race EDA
tabPanel("Race",
mainPanel(
includeMarkdown('./md/race_EDA.md'),
plotOutput('race_pie', width = '80%'),
includeMarkdown('./md/race_EDA_2.md'),
plotOutput('race_status_pair'),
width=12
)
),
# Endorsements EDA
tabPanel("Endorsements",
mainPanel(
includeMarkdown("./md/endorsements_EDA.md"),
tableOutput('endorsements_table'),
includeMarkdown("./md/endorsements_EDA_2.md"),
plotOutput('endorsements_bar'),
includeMarkdown("./md/endorsements_EDA_3.md"),
width=12
)
)),
width=11
)),
tabPanel('Our Prediction Models',
mainPanel(
includeMarkdown('./md/model_intro.md'),
tags$br(),
tabsetPanel(
tabPanel("Statistical Analysis: Logistic Regression",
mainPanel(
# includeMarkdown('./md/logistic_regression.md'),
# plotOutput('lr_plot'),
includeMarkdown('./md/logistic_regression.md'),
width=12
)),
tabPanel("Machine Learning: K Nearest Neighbors",
mainPanel(
includeMarkdown('./md/knn_desc.md'),
includeMarkdown('./md/knn_app.md'),
# includeMarkdown('./md/ml_analysis.md'),
# plotOutput('knn_plot'),
# plotOutput('rfc_plot'),
# includeMarkdown('./md/ml_analysis_2.md'),
# plotOutput('ml_acc'),
width=12
)),
tabPanel("Machine Learning: Random Forest",
mainPanel(
includeMarkdown('./md/rfc_desc.md'),
includeMarkdown('./md/rfc_app.md'),
width=12)
)),
tags$br(),
width=12
),
includeMarkdown('./md/limitations.md'),
width=11
),
tabPanel("So What Matters?",
mainPanel(
includeMarkdown('./md/model_comparison.md'),
tags$br(),
sidebarLayout(
sidebarPanel(
radioButtons("model", "Model Type:",
c("KNN" = "knn",
"Random Forest" = "rfc",
"Logistic" = "lr"),
selected = 'knn')
),
mainPanel(
plotOutput('model_plot')
)
),
includeMarkdown('./md/conclusion.md'),
width=12
))
)
)
))
runApp()
knn_agg
stat_pred
ggplot(knn_agg, aes(knn_agg, fill=outcome)) +
geom_col()
ggplot(stat_pred, aes(x=outcome, y=lr_pred)) + geom_point()
source('~/Documents/UW/2018-2019/A\'18/INFO 370A/info370finalproject/R/model_analysis.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
scores
runApp()
runApp()
runApp()
knn_agg
runApp()
install.packages('readr')
install.packages('readr')
install.packages("readr")
shiny::runApp()
runApp()
test <- Column | Description
-------|----------------------------------------------------------------------------------------
`Candidate` | All candidates who received votes in 2018’s Democratic primary elections for U.S. Senate, U.S. House and governor in which no incumbent ran. Supplied by Ballotpedia.
`State` | The state in which the candidate ran. Supplied by Ballotpedia.
`Office Type` | The office for which the candidate ran. Supplied by Ballotpedia.
`Primary Status` | Whether the candidate lost (“Lost”) the primary or won/advanced to a runoff (“Advanced”). Supplied by Ballotpedia.
`Primary Percentage` | The percentage of the vote received by the candidate in his or her primary. In states that hold runoff elections, we looked only at the first round (the regular primary). In states that hold all-party primaries (e.g., California), a candidate’s primary percentage is the percentage of the total Democratic vote they received. Unopposed candidates and candidates nominated by convention (not primary) are given a primary percentage of 100 but were excluded from our analysis involving vote share. Numbers come from official results posted by the secretary of state or local elections authority; if those were unavailable, we used unofficial election results from the New York Times.
`Neutral Endorsements` | The number of groups and individuals that did not weigh in on whether or not they endorsed the candidate.
`Yes Endorsements` | The number of specific endorsements that a candidate received before the primary.
`No Endorsements` | The number of specific anti-endorsements that a candidate received before the primary. An anti-endorsement is defined as a candidate running against another endorsed candidate, or if they were specifically anti-endorsed before the primary (for example, if money was spent to attack the candidate).
`Veteran?` | If the candidate’s website says that he or she served in the armed forces, we put “Yes.” If the website is silent on the subject (or explicitly says he or she didn’t serve), we put “No.” If the field says "Unknown", no website was available.
`LGBTQ?` | If the candidate’s website says that he or she is LGBTQ (including indirect references like to a same-sex partner), we put “Yes.” If the website is silent on the subject (or explicitly says he or she is straight), we put “No.” If the field says "Unknown", no website was available.
`Elected Official?` | We used Ballotpedia, VoteSmart and news reports to research whether the candidate had ever held elected office before, at any level. We put “Yes” if the candidate has held elected office before and “No” if not.
`Self-Funder?` | We used Federal Election Committee fundraising data (for federal candidates) and state campaign-finance data (for gubernatorial candidates) to look up how much each candidate had invested in his or her own campaign, through either donations or loans. We put “Yes” if the candidate donated or loaned a cumulative $400,000 or more to his or her own campaign before the primary and “No” for all other candidates.
`STEM?` | If the candidate identifies on his or her website that he or she has a background in the fields of science, technology, engineering or mathematics, we put “Yes.” If not, we put “No.” If the field says "Unknown", no website was available.
`Obama Alum?` | We put “Yes” if the candidate mentions working for the Obama administration or campaign on his or her website, or if the candidate shows up on this list of Obama administration members and campaign hands running for office. If not, we put “No.”
`Dem Party Support?` | “Yes” if the candidate was placed on the DCCC’s Red to Blue list before the primary, was endorsed by the DSCC before the primary, or if the DSCC/DCCC aired pre-primary ads in support of the candidate. (Note: according to the DGA’s press secretary, the DGA does not get involved in primaries.) “No” if the candidate is running against someone for whom one of the above things is true, or if one of those groups specifically anti-endorsed or spent money to attack the candidate. If those groups simply did not weigh in on the race, we filled the cell with "Neutral".
runApp()
runApp()
runApp()
runApp()
descriptions
descriptions
runApp()
runApp()
descriptions
