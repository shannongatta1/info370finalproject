dems <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
dems[,1]
dems[1,]
library(dplyr)
dems[1,] %>% select(c(16:27))
dems[1,] %>% select(c(16:27)) %>% rowSums(. = 'Neutral')
dems[1,] %>% select(c(16:27)) %>% rowSums(. == 'Neutral')
test <- dems[1,] %>% select(c(16:27))
View(dems)
View(test)
test$Neutral <- rowSums(test == 'Neutral')
test$Neutral <- rowSums(test == 'Netural')
test2 <- dems %>% select(c(16:27))
View(test2)
test2$Neutral <- rowSums(test == 'Netural')
test2$Yes <- rowSums(test == 'Yes')
test2$No <- rowSums(test == 'No')
test2$Neutral <- rowSums(test2 == 'Netural')
test2$Yes <- rowSums(test2 == 'Yes')
test2$No <- rowSums(test2 == 'No')
library(dplyr)
dems <- read.csv('./data/dem_candidates.csv', stringsAsFactors = FALSE)
# Retrieve months from election date
get_month <- function(date) {
parts <- strsplit(date, '/') %>% unlist(.)
return (parts[1])
}
dems$Election.Month <- lapply(dems$Race.Primary.Election.Date, get_month) %>% unlist(.)
# Fill NA's in endorsement columns, Party.Support, Gun.Sense.Candidate, No.Labels.Support
# with "neutral"
endorsement_cols <- grep('.Endorsed', colnames(dems), value = TRUE)
fill_neutral <- function(row) {
if (row == "") {
return ('Neutral')
} else {
return (row)
}
}
for (col in endorsement_cols) {
dems[[col]] <- lapply(dems[[col]], fill_neutral) %>% unlist(.)
}
dems$Party.Support. <- lapply(dems$Party.Support., fill_neutral) %>% unlist(.)
dems$Guns.Sense.Candidate. <- lapply(dems$Guns.Sense.Candidate., fill_neutral) %>% unlist(.)
dems$No.Labels.Support. <- lapply(dems$No.Labels.Support., fill_neutral) %>% unlist(.)
# Race, Veteran, LGBTQ, STEM, <- unknown
fill_unknown <- function(row) {
if (row == "") {
return ('Unknown')
} else {
return (row)
}
}
unknown_cols <- c('Race', 'Veteran.', 'LGBTQ.', 'STEM.')
for (col in unknown_cols) {
dems[[col]] <- lapply(dems[[col]], fill_unknown) %>% unlist(.)
}
# Obama.Alum, Elected.Official <- no
fill_no <- function(row) {
if (row == "") {
return ('No')
} else {
return (row)
}
}
dems$Obama.Alum. <- lapply(dems$Obama.Alum., fill_no) %>% unlist(.)
dems$Elected.Official. <- lapply(dems$Elected.Official., fill_no) %>% unlist(.)
# Remove columns: N/A's, General.Status, Won.Primary, Race.Type, Partisan.Lean
dems$General.Status <- NULL
dems$Won.Primary <- NULL
dems$Race.Type <- NULL
dems$Partisan.Lean <- NULL
dems$Race.Primary.Election.Date <- NULL
# Export CSV
write.csv(dems, file = './data/dem_candidates_prepped.csv', row.names = FALSE)
library(ggplot2)
library(dplyr)
dems <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
# bar chart:
# x-axis - election month
# y-axis - count
# color by primary status
# map:
# fill each state with a different color depending on the month of the election
# pie chart for endorsements: --> facet grid
# number of yes, no, neutral
# bar chart: --> facet grid
# number of yes, no, neutral
# color by primary status
# [row, ]
test <- dems[1,] %>% select(c(16:27))
test$Neutral <- rowSums(test == 'Netural')
count_endorsements <- function(row) {
row <- row %>% select(c(16:27))
row
}
test2 <- dems %>% select(c(16:27))
test2$Neutral <- rowSums(test2 == 'Netural')
test2$Yes <- rowSums(test2 == 'Yes')
test2$No <- rowSums(test2 == 'No')
test2 <- dems %>% select(c(16:27))
test2$Neutral <- rowSums(test2 == 'Neutral')
test2$Yes <- rowSums(test2 == 'Yes')
test2$No <- rowSums(test2 == 'No')
rm(test)
rm(test2)
dems <- dems %>% select(c(16:27))
dems$Neutral <- rowSums(dems == 'Neutral')
dems$Yes <- rowSums(dems == 'Yes')
dems$No <- rowSums(dems == 'No')
yes_endorsements <- dems %>% filter(Yes > 0)
View(yes_endorsements)
rm(count_endorsements)
dems <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
count_endorsements <- dems %>% select(c(16:27))
count_endorsements <- dems %>% select(c(16:27))
count_endorsements$Neutral <- rowSums(count_endorsements == 'Neutral')
count_endorsements$Yes <- rowSums(count_endorsements == 'Yes')
count_endorsements$No <- rowSums(count_endorsements == 'No')
View(count_endorsements)
dems$Neutral <- rowSums(count_endorsements == 'Neutral')
dems$Yes <- rowSums(count_endorsements == 'Yes')
dems$No <- rowSums(count_endorsements == 'No')
yes_endorsements <- dems %>% filter(Yes > 0)
library(ggplot2)
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=count(Primary.Status)))+
geom_bar(width = 1, stat = "identity")
endorsements_bar
yes_endorsements <- dems %>% filter(Yes > 0) %>% group_by(Primary.Status)
View(yes_endorsements)
yes_endorsements <- dems %>% filter(Yes > 0) %>% group_by(Primary.Status) %>% n(Primary.Status)
yes_endorsements <- dems %>% filter(Yes > 0) %>% group_by(Primary.Status) %>% count(Primary.Status)
endorsements_bar <- ggplot(yes_endorsements, aes(x="", y=n))+
geom_bar(width = 1, stat = "identity")
endorsements_bar
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n))+
geom_bar(width = 1, stat = "identity")
endorsements_bar
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n))+
geom_bar()
endorsements_bar
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n))+
geom_bar(stat = "identity")
endorsements_bar
no_endorsements <-
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n))+
geom_bar(stat = "identity", fill=Primary.Status)
no_endorsements <-
endorsements_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
endorsements_bar
no_endorsements <- dems %>% filter(No > 0) %>% group_by(Primary.Status) %>% count(Primary.Status)
neutral_endorsements <- dems %>% filter(Yes > 0, No > 0) %>%
group_by(Primary.Status) %>%
count(Primary.Status)
yes_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
no_bar <- ggplot(no_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
neutral_bar <- ggplot(neutral_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
rm(endorsements_bar)
no_bar
neutral_bar
dummies <- read.csv('./data/dems_with_dummies.csv', stringsAsFactors = FALSE)
dummies <- read.csv('./data/dem_with_dummies.csv', stringsAsFactors = FALSE)
View(dummies)
write.csv(dems, file = './data/dems_with_endorsement_counts.csv', row.names = FALSE)
View(count_endorsements)
library(ggplot2)
library(dplyr)
dems <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
dummies <- read.csv('./data/dem_with_dummies.csv', stringsAsFactors = FALSE)
# bar chart:
# x-axis - election month
# y-axis - count
# color by primary status
# map:
# fill each state with a different color depending on the month of the election
# pie chart for endorsements: --> facet grid
# number of yes, no, neutral
# bar chart: --> facet grid
# number of yes, no, neutral
# color by primary status
count_endorsements <- dems %>% select(c(16:27))
dems$Neutral.Endorsements <- rowSums(count_endorsements == 'Neutral')
dems$Yes.Endorsements <- rowSums(count_endorsements == 'Yes')
dems$No.Endorsements <- rowSums(count_endorsements == 'No')
write.csv(dems, file = './data/dems_with_endorsement_counts.csv', row.names = FALSE)
yes_endorsements <- dems %>% filter(Yes > 0) %>% group_by(Primary.Status) %>% count(Primary.Status)
no_endorsements <- dems %>% filter(No > 0) %>% group_by(Primary.Status) %>% count(Primary.Status)
neutral_endorsements <- dems %>% filter(Yes > 0, No > 0) %>%
group_by(Primary.Status) %>%
count(Primary.Status)
yes_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
no_bar <- ggplot(no_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
neutral_bar <- ggplot(neutral_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
yes_bar
no_bar
yes_endorsements
yes_bar
no_bar
neutral_bar
yes_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")
yes_bar
View(yes_endorsements)
data.frame(yes_endorsements, no_endorsements)
yes_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "Yes" Endorsements')
no_bar <- ggplot(no_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "No" Endorsements')
neutral_bar <- ggplot(neutral_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "Neutral" Endorsements')
yes_bar
yes_bar <- ggplot(yes_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "Yes" Endorsements')+
labs(y='count')
no_bar <- ggplot(no_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "No" Endorsements')+
labs(y='count')
neutral_bar <- ggplot(neutral_endorsements, aes(x=Primary.Status, y=n, fill=Primary.Status))+
geom_bar(stat = "identity")+
ggtitle('Results for "Neutral" Endorsements')+
labs(y='count')
yes_bar
no_bar
neutral_bar
shiny::runApp('FinalProjectShiny')
install.packages("reticulate")
install.packages("GGally")
library(ggplot2)
library(dplyr)
library(scales)
data <- read.csv('../data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
dummy_data <- read.csv('../data/dem_with_dummies.csv', stringsAsFactors = FALSE)
#Race
white_can <- data %>% filter(Race == 'White')
non_white_can <- data %>% filter(Race == 'Nonwhite')
unknown_can <- data %>% filter(Race == 'Unknown')
advanced <- data %>% filter(Primary.Status == 'Advanced')
lost <- data %>% filter(Primary.Status == 'Lost')
race <- data.frame(race=c("White", "Nonwhite", "Unknown"), value=c(nrow(white_can), nrow(non_white_can), nrow(unknown_can)))
# 32% of the total candidates advance
percent_advanced <- nrow(advanced)/(nrow(advanced)+nrow(lost)) * 100
#pie chart
race_pie_chart <- ggplot(race, aes(x="", y=value, fill=race))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start=0) +
geom_text(aes(y = value/2 +
c(0, cumsum(value)[-length(value)]), label = percent(value/(nrow(white_can)+nrow(non_white_can)+nrow(unknown_can)))), size=5)
# stacked bar charts
data$Race <- factor(data$Race) # Create a categorical variable
data$Primary.Status <- factor(data$Primary.Status) # Create categorical variable
status_race_stacked <- ggplot(data%>% count(Primary.Status, Race) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Primary.Status, n, fill=Race)) +
geom_bar(stat="identity") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))
race_status_stacked <- ggplot(data%>% count(Race, Primary.Status) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Race, n, fill=Primary.Status)) +
geom_bar(stat="identity") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))
library(ggplot2)
library(dplyr)
library(scales)
data <- read.csv('../data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
dummy_data <- read.csv('../data/dem_with_dummies.csv', stringsAsFactors = FALSE)
data <- read.csv('../data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
setwd("~/Desktop/info370/info370finalproject/R")
data <- read.csv('../data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
data <- read.csv('../data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
library(scales)
data <- read.csv('../data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
dummy_data <- read.csv('../data/dem_with_dummies.csv', stringsAsFactors = FALSE)
#Race
white_can <- data %>% filter(Race == 'White')
non_white_can <- data %>% filter(Race == 'Nonwhite')
unknown_can <- data %>% filter(Race == 'Unknown')
advanced <- data %>% filter(Primary.Status == 'Advanced')
lost <- data %>% filter(Primary.Status == 'Lost')
race <- data.frame(race=c("White", "Nonwhite", "Unknown"), value=c(nrow(white_can), nrow(non_white_can), nrow(unknown_can)))
# 32% of the total candidates advance
percent_advanced <- nrow(advanced)/(nrow(advanced)+nrow(lost)) * 100
#pie chart
race_pie_chart <- ggplot(race, aes(x="", y=value, fill=race))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start=0) +
geom_text(aes(y = value/2 +
c(0, cumsum(value)[-length(value)]), label = percent(value/(nrow(white_can)+nrow(non_white_can)+nrow(unknown_can)))), size=5)
# stacked bar charts
data$Race <- factor(data$Race) # Create a categorical variable
data$Primary.Status <- factor(data$Primary.Status) # Create categorical variable
status_race_stacked <- ggplot(data%>% count(Primary.Status, Race) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Primary.Status, n, fill=Race)) +
geom_bar(stat="identity") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))
race_status_stacked <- ggplot(data%>% count(Race, Primary.Status) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Race, n, fill=Primary.Status)) +
geom_bar(stat="identity") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))
setwd("~/Desktop/info370/info370finalproject")
data <- read.csv('../data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
getwd()
stat_preds <- read.csv('./data/logistic_test_predictions', stringsAsFactors = FALSE)
setwd("~/Desktop/info370/info370finalproject")
stat_preds <- read.csv('./data/logistic_test_predictions', stringsAsFactors = FALSE)
stat_preds <- read.csv('./data/logistic_test_predictions.csv', stringsAsFactors = FALSE)
stat_preds <- read.csv('./data/logistic_test_predictions.csv', stringsAsFactors = FALSE)
logistic_agg <- count(pred, outcome, stat_pred)
logistic_agg <- count(stat_pred, outcome, stat_pred)
stat_pred <- read.csv('./data/logistic_test_predictions.csv', stringsAsFactors = FALSE)
logistic_agg <- count(stat_pred, outcome, stat_pred)
logistic_agg <- count(stat_pred, outcome, lr_pred)
ggplot(logistic_agg, aes(outcome, lr_pred, color=n)) +
geom_point( size = (logistic_agg$n)) +
xlim(-.5, 1.5)+ylim(-1, 1.5) +
ggtitle("Number of RFC Predictions and Outcome Correlations") +
geom_text(aes(label=logistic_agg$n), size=5, color = "white")
print(logistic_agg)
$\left[\begin{array}
{rrr}
157 & 13 \\
50 & 24 \\
\end{array}\right]
$
install.packages("kableExtra")
install.packages("kableExtra")
status_race_stacked <- ggplot(data%>% dplyr::count(Primary.Status, Race) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Primary.Status, n, fill=Race)) +
geom_bar(stat="identity") +
ggtitle("Accuracy Scores for Machine Learning Algorithms") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))+
labs(y='count')
library(ggplot2)
library(dplyr)
library(scales)
# Read in democratic primary data
data <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
dummy_data <- read.csv('./data/dem_with_dummies.csv', stringsAsFactors = FALSE)
# Filter candidates by race
white_can <- data %>% filter(Race == 'White')
non_white_can <- data %>% filter(Race == 'Nonwhite')
unknown_can <- data %>% filter(Race == 'Unknown')
# Filter candidates by advanced or lost
advanced <- data %>% filter(Primary.Status == 'Advanced')
lost <- data %>% filter(Primary.Status == 'Lost')
# Create dataframe of counts for each race type
race <- data.frame(race=c("White", "Nonwhite", "Unknown"),
value=c(nrow(white_can), nrow(non_white_can), nrow(unknown_can)))
# Calculate percentage of advanced - 32% of the total candidates advance
percent_advanced <- nrow(advanced)/(nrow(advanced)+nrow(lost)) * 100
# Create pie chart of race distribution
race_pie_chart <- ggplot(race, aes(x="", y=value, fill=race))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start=0) +
geom_text(aes(y = value/2 +
c(0, cumsum(value)[-length(value)]), label = percent(value/(nrow(white_can)+nrow(non_white_can)+nrow(unknown_can)))), size=5)
# Create stacked bar charts for race and primary status
data$Race <- factor(data$Race) # Create a categorical variable
data$Primary.Status <- factor(data$Primary.Status) # Create categorical variable
status_race_stacked <- ggplot(data%>% dplyr::count(Primary.Status, Race) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Primary.Status, n, fill=Race)) +
geom_bar(stat="identity") +
ggtitle("Accuracy Scores for Machine Learning Algorithms") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))+
labs(y='count')
race_status_stacked <- ggplot(data%>% dplyr::count(Race, Primary.Status) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Race, n, fill=Primary.Status)) +
geom_bar(stat="identity") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))+
labs(y='count')
ggplot(data%>% dplyr::count(Primary.Status, Race) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Primary.Status, n, fill=Race)) +
geom_bar(stat="identity") +
ggtitle("Accuracy Scores for Machine Learning Algorithms") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))+
labs(y='count')
status_race_stacked <- ggplot(data%>% dplyr::count(Primary.Status, Race) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Primary.Status, n, fill=Race)) +
geom_bar(stat="identity") +
ggtitle("Primary Status stacked by Race category") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))+
labs(y='count')
ggplot(data%>% dplyr::count(Primary.Status, Race) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Primary.Status, n, fill=Race)) +
geom_bar(stat="identity") +
ggtitle("Primary Status stacked by Race category") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))+
labs(y='count')
ggplot(data%>% dplyr::count(Race, Primary.Status) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Race, n, fill=Primary.Status)) +
geom_bar(stat="identity") +
ggtitle("Primary Status stacked by Race category") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))+
labs(y='count')
ggplot(race, aes(x="", y=value, fill=race))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start=0) +
geom_text(aes(y = value/2 +
ggtitle("Candidates Race category Makeup") +
c(0, cumsum(value)[-length(value)]), label = percent(value/(nrow(white_can)+nrow(non_white_can)+nrow(unknown_can)))), size=5)
ggplot(race, aes(x="", y=value, fill=race))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start=0) +
geom_text(aes(y = value/2) +
ggtitle("Candidates Race category Makeup") +
c(0, cumsum(value)[-length(value)]), label = percent(value/(nrow(white_can)+nrow(non_white_can)+nrow(unknown_can)))), size=5)
ggplot(race, aes(x="", y=value, fill=race))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start=0) +
ggtitle("All Candidates Race") +
geom_text(aes(y = value/2 +
c(0, cumsum(value)[-length(value)]), label = percent(value/(nrow(white_can)+nrow(non_white_can)+nrow(unknown_can)))), size=5)
library(ggplot2)
library(dplyr)
library(scales)
# Read in democratic primary data
data <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
dummy_data <- read.csv('./data/dem_with_dummies.csv', stringsAsFactors = FALSE)
# Filter candidates by race
white_can <- data %>% filter(Race == 'White')
non_white_can <- data %>% filter(Race == 'Nonwhite')
unknown_can <- data %>% filter(Race == 'Unknown')
# Filter candidates by advanced or lost
advanced <- data %>% filter(Primary.Status == 'Advanced')
lost <- data %>% filter(Primary.Status == 'Lost')
# Create dataframe of counts for each race type
race <- data.frame(race=c("White", "Nonwhite", "Unknown"),
value=c(nrow(white_can), nrow(non_white_can), nrow(unknown_can)))
# Calculate percentage of advanced - 32% of the total candidates advance
percent_advanced <- nrow(advanced)/(nrow(advanced)+nrow(lost)) * 100
# Create pie chart of race distribution
race_pie_chart <- ggplot(race, aes(x="", y=value, fill=race))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start=0) +
ggtitle("All Candidates Race Proportions") +
geom_text(aes(y = value/2 +
c(0, cumsum(value)[-length(value)]), label = percent(value/(nrow(white_can)+nrow(non_white_can)+nrow(unknown_can)))), size=5)
# Create stacked bar charts for race and primary status
data$Race <- factor(data$Race) # Create a categorical variable
data$Primary.Status <- factor(data$Primary.Status) # Create categorical variable
status_race_stacked <- ggplot(data%>% dplyr::count(Primary.Status, Race) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Primary.Status, n, fill=Race)) +
geom_bar(stat="identity") +
ggtitle("Primary Status stacked by Race category") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))+
labs(y='count')
race_status_stacked <- ggplot(data%>% dplyr::count(Race, Primary.Status) %>%
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(Race, n, fill=Primary.Status)) +
geom_bar(stat="identity") +
ggtitle("Race category stacked by Primary Status") +
geom_text(aes(label=paste0(sprintf("%1.1f", pct*100),"%")),
position=position_stack(vjust=0.5))+
labs(y='count')
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(plotly)
library(dplyr)
library(reticulate)
library(lattice)
library(ggplot2)
library(GGally)
library(gridExtra)
library(knitr)
library(kableExtra)
dems <- read.csv('./data/dem_candidates_prepped.csv', stringsAsFactors = FALSE)
scores <- read.csv('./data/model_accuracy_ML.csv', stringsAsFactors = FALSE)
pred <- read.csv('./data/model_test_predictions.csv', stringsAsFactors = FALSE)
stat_pred <- read.csv('./data/logistic_test_predictions.csv', stringsAsFactors = FALSE)
race_pie_chart
status_race_stacked
race_status_stacked
?sd
numbers <- c(0, 1, 2)
sd(numbers)
numbers <- c(0.76, 0.68, 0.741803)
sd(numbers)
shiny::runApp()
