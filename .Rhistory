all$last_name <- lapply(all$last_name, simpleCap)
# Reformat names
reformat_name <- function(name) {
# name[1] = last, name[2] = first
names <- strsplit(name, ', ') %>% unlist(.)
suffix <- NA
if ('Jr.' %in% names) {
suffix <- match('Jr.', names)
} else if ('III' %in% names) {
suffix <- match('III', names)
}
if (is.na(suffix)) {
return (paste(names[2], tolower(names[1]), sep = ' '))
} else {
if (suffix == 3) {
return (tolower(paste(names[2], tolower(names[1]), names[3], sep = ' ')))
} else {
return (tolower(paste(names[3], tolower(names[1]), names[2], sep = ' ')))
}
}
}
all$bioname <- lapply(all$bioname, reformat_name)
all$bioname <- lapply(all$bioname, simpleCap)
# Match name to Member in resignations df
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
return (nickname)
}
all$Member <- lapply(all$bioname, get_common_name) %>% unlist(.)
get_common_name('hello testing (hi) lol')
get_common_name('hello testing lol')
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
}
return (nickname)
}
get_common_name('hello testing lol')
get_common_name('hello testing (hi) lol')
all$Member <- lapply(all$bioname, get_common_name) %>% unlist(.)
library(stringr)
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
} else {
nickname <- substr(nickname, 1, -1)
return (nickname)
}
}
get_common_name('hello testing (hi) lol')
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
} else {
nickname <- substr(nickname, 1)
return (nickname)
}
}
get_common_name('hello testing (hi) lol')
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
} else {
nickname <- substr(nickname, 1, 3)
return (nickname)
}
}
get_common_name('hello testing (hi) lol')
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
} else {
nickname <- substr(nickname, 0, -1)
return (nickname)
}
}
get_common_name('hello testing (hi) lol')
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
} else {
nickname <- substr(nickname, 1, 3)
return (nickname)
}
}
get_common_name('hello testing (hi) lol')
substr('(hi)', 1, 3)
substr('(hi)', 1, 4)
substr('(hi)', 2, 4)
substr('(hi)', 2, -1)
substr('(hi)', 2, nchar('('hi)') - 1)
substr('(hi)', 2, nchar('(hi)') - 1)
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
} else {
nickname <- substr(nickname, 2, nchar(nickname) - 1)
return (nickname)
}
}
all$Member <- lapply(all$bioname, get_common_name) %>% unlist(.)
{
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
} else {
nickname <- substr(nickname, 2, nchar(nickname) - 1)
simpleCap(nickname)
return (nickname)
}
}
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
} else {
nickname <- substr(nickname, 2, nchar(nickname) - 1)
simpleCap(nickname)
return (nickname)
}
}
all$Member <- lapply(all$bioname, get_common_name) %>% unlist(.)
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
} else {
nickname <- substr(nickname, 2, nchar(nickname) - 1) %>% simpleCap(.)
return (nickname)
}
}
all$Member <- lapply(all$bioname, get_common_name) %>% unlist(.)
all$Member <- paste(all$Member, all$last_name, sep = ' ')
library(dplyr)
library(stringr)
# Load data
resignations <- read.csv('./data/congressional_resignations.csv', stringsAsFactors=FALSE)
#current <- read.csv('./data/legislators-current.csv', stringsAsFactors=FALSE)
#past <- read.csv('./data/legislators-historical.csv', stringsAsFactors=FALSE)
all <- read.csv('./data/HSall_members.csv', stringsAsFactors = FALSE)
# Dream dataset: party, age, state, resigned or not, congress year
# reason why they left
# Filter to necessary columns from each data frame
resignations$Source <- NULL
resignations$Resignation.Date <- NULL
current <- select(current, full_name, birthday, state, party)
past <- select(past, full_name, birthday, state, party)
all <- select(all, congress, bioname, state_abbrev, born, died, party_code) %>%
filter(congress > 109, state_abbrev != 'USA')
# Format names
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
# Data prep for 'all' dataframe ------------------------------------------------------------------
# Separate last names for identification
all$last_name <- lapply(all$bioname, function(name) { unlist(strsplit(name, ', '))[1] })
all$last_name <- tolower(all$last_name)
all$last_name <- lapply(all$last_name, simpleCap)
# Reformat names
reformat_name <- function(name) {
# name[1] = last, name[2] = first
names <- strsplit(name, ', ') %>% unlist(.)
suffix <- NA
if ('Jr.' %in% names) {
suffix <- match('Jr.', names)
} else if ('III' %in% names) {
suffix <- match('III', names)
}
if (is.na(suffix)) {
return (paste(names[2], tolower(names[1]), sep = ' '))
} else {
if (suffix == 3) {
return (tolower(paste(names[2], tolower(names[1]), names[3], sep = ' ')))
} else {
return (tolower(paste(names[3], tolower(names[1]), names[2], sep = ' ')))
}
}
}
all$bioname <- lapply(all$bioname, reformat_name)
all$bioname <- lapply(all$bioname, simpleCap)
# Match name to Member in resignations df
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
} else {
nickname <- substr(nickname, 2, nchar(nickname) - 1) %>% simpleCap(.)
return (nickname)
}
}
all$Member <- lapply(all$bioname, get_common_name) %>% unlist(.)
all$Member <- paste(all$Member, all$last_name, sep = ' ')
# Convert party code to party name
get_party_name <- function(code) {
if (code == 100) {
return ('D')
} else if (code == 200) {
return ('R')
} else {
return ('I')
}
}
all$party_code <- lapply(all$party_code, get_party_name)
# Add years for each session
for (i in 1:nrow(all)) {
if (all$congress[i] == 110) {
all$sess_1[i] <- 2007
all$sess_2[i] <- 2008
} else if (all$congress[i] == 111) {
all$sess_1[i] <- 2009
all$sess_2[i] <- 2010
} else if (all$congress[i] == 112) {
all$sess_1[i] <- 2011
all$sess_2[i] <- 2012
} else if (all$congress[i] == 113) {
all$sess_1[i] <- 2013
all$sess_2[i] <- 2014
} else if (all$congress[i] == 114) {
all$sess_1[i] <- 2015
all$sess_2[i] <- 2016
} else if (all$congress[i] == 115) {
all$sess_1[i] <- 2017
all$sess_2[i] <- 2018
}
}
# Calculate age (based off of first session)
calculate_age <- function(birth, session) {
return (session - birth)
}
all$age <- lapply(all$born, calculate_age, session=all$sess_1)
for (i in 1:nrow(all)) {
all$age[i] <- all$age[[i]][1]
}
colnames(all) <- c('Congress', 'Full Name', 'State', 'born', 'died', 'Party', 'last_name', 'sess_1', 'sess_2', 'age')
# Data prep for 'resignations' dataframe ----------------------------------------------------------
# Convert Congress value to numeric
convert_congress <- function(congress) {
return (as.numeric(gsub("([0-9]*).*","\\1", congress)))
}
resignations$Congress <- lapply(resignations$Congress, convert_congress)
# Filter congress to be greater than 109
resignations <- filter(resignations, Congress > 109)
# Get states
get_state <- function(district) {
split <- strsplit(district, '-') %>% unlist(.)
return (split[1])
}
resignations$District <- lapply(resignations$District, get_state)
resignations$State <- resignations$District
resignations$District <- NULL
# Separate categories if multiple
get_categories <- function(cat) {
cats <- strsplit(cat, ' & ') %>% unlist(.)
return (cats)
}
cats <- lapply(resignations$Category, get_categories)
for (i in 1:length(cats)) {
if (length(cats[[i]]) == 2) {
resignations$Category_1[i] <- cats[[i]][1]
resignations$Category_2[i] <- cats[[i]][2]
} else {
resignations$Category_1[i] <- cats[[i]][1]
resignations$Category_2[i] <- 'NA'
}
}
resignations$Category <- NULL
# Add years for each session
for (i in 1:nrow(resignations)) {
if (resignations$Congress[i] == 110) {
resignations$sess_1[i] <- 2007
resignations$sess_2[i] <- 2008
} else if (resignations$Congress[i] == 111) {
resignations$sess_1[i] <- 2009
resignations$sess_2[i] <- 2010
} else if (resignations$Congress[i] == 112) {
resignations$sess_1[i] <- 2011
resignations$sess_2[i] <- 2012
} else if (resignations$Congress[i] == 113) {
resignations$sess_1[i] <- 2013
resignations$sess_2[i] <- 2014
} else if (resignations$Congress[i] == 114) {
resignations$sess_1[i] <- 2015
resignations$sess_2[i] <- 2016
} else if (resignations$Congress[i] == 115) {
resignations$sess_1[i] <- 2017
resignations$sess_2[i] <- 2018
}
}
# Separate last names for identification
resignations$last_name <- lapply(resignations$Member,
function(name) { unlist(strsplit(name, ' '))[2] })
resignations$last_name <- tolower(resignations$last_name)
resignations$last_name <- lapply(resignations$last_name, simpleCap)
# Get year of resignation
resignations$year <- lapply(resignations$Resignation.Date,
function(date) { unlist(strsplit(date, '/'))[3] })
# Merge dataframes --------------------------------------------------------------------------------
# Identify members by last name, party, state, and congress
all <- as.data.frame(lapply(all, unlist))
resignations <- as.data.frame(lapply(resignations, unlist))
resignations <- merge(all, resignations, by='')
combined <- merge(all, resignations, by=c('Congress', 'State', 'Party', 'last_name'), all.x=TRUE)
# Remove unnecessary columns
combined$sess_1.y <- NULL
combined$sess_2.y <- NULL
combined$last_name <- NULL
# Check joined rows
sum(!is.na(combined$Reason))
resigned <- filter(combined, !is.na(Reason))
library(dplyr)
library(stringr)
# Load data
resignations <- read.csv('./data/congressional_resignations.csv', stringsAsFactors=FALSE)
#current <- read.csv('./data/legislators-current.csv', stringsAsFactors=FALSE)
#past <- read.csv('./data/legislators-historical.csv', stringsAsFactors=FALSE)
all <- read.csv('./data/HSall_members.csv', stringsAsFactors = FALSE)
# Dream dataset: party, age, state, resigned or not, congress year
# reason why they left
# Filter to necessary columns from each data frame
resignations$Source <- NULL
resignations$Resignation.Date <- NULL
current <- select(current, full_name, birthday, state, party)
past <- select(past, full_name, birthday, state, party)
all <- select(all, congress, bioname, state_abbrev, born, died, party_code) %>%
filter(congress > 109, state_abbrev != 'USA')
# Format names
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
# Data prep for 'all' dataframe ------------------------------------------------------------------
# Separate last names for identification
all$last_name <- lapply(all$bioname, function(name) { unlist(strsplit(name, ', '))[1] })
all$last_name <- tolower(all$last_name)
all$last_name <- lapply(all$last_name, simpleCap)
# Reformat names
reformat_name <- function(name) {
# name[1] = last, name[2] = first
names <- strsplit(name, ', ') %>% unlist(.)
suffix <- NA
if ('Jr.' %in% names) {
suffix <- match('Jr.', names)
} else if ('III' %in% names) {
suffix <- match('III', names)
}
if (is.na(suffix)) {
return (paste(names[2], tolower(names[1]), sep = ' '))
} else {
if (suffix == 3) {
return (tolower(paste(names[2], tolower(names[1]), names[3], sep = ' ')))
} else {
return (tolower(paste(names[3], tolower(names[1]), names[2], sep = ' ')))
}
}
}
all$bioname <- lapply(all$bioname, reformat_name)
all$bioname <- lapply(all$bioname, simpleCap)
# Match name to Member in resignations df
get_common_name <- function(name) {
names <- strsplit(name, ' ') %>% unlist(.)
nickname <- grep('^\\(', names, value = TRUE)
if (identical(nickname, character(0))) {
return (names[1])
} else {
nickname <- substr(nickname, 2, nchar(nickname) - 1) %>% simpleCap(.)
return (nickname)
}
}
all$Member <- lapply(all$bioname, get_common_name) %>% unlist(.)
all$Member <- paste(all$Member, all$last_name, sep = ' ')
# Convert party code to party name
get_party_name <- function(code) {
if (code == 100) {
return ('D')
} else if (code == 200) {
return ('R')
} else {
return ('I')
}
}
all$party_code <- lapply(all$party_code, get_party_name)
# Add years for each session
for (i in 1:nrow(all)) {
if (all$congress[i] == 110) {
all$sess_1[i] <- 2007
all$sess_2[i] <- 2008
} else if (all$congress[i] == 111) {
all$sess_1[i] <- 2009
all$sess_2[i] <- 2010
} else if (all$congress[i] == 112) {
all$sess_1[i] <- 2011
all$sess_2[i] <- 2012
} else if (all$congress[i] == 113) {
all$sess_1[i] <- 2013
all$sess_2[i] <- 2014
} else if (all$congress[i] == 114) {
all$sess_1[i] <- 2015
all$sess_2[i] <- 2016
} else if (all$congress[i] == 115) {
all$sess_1[i] <- 2017
all$sess_2[i] <- 2018
}
}
# Calculate age (based off of first session)
calculate_age <- function(birth, session) {
return (session - birth)
}
all$age <- lapply(all$born, calculate_age, session=all$sess_1)
for (i in 1:nrow(all)) {
all$age[i] <- all$age[[i]][1]
}
colnames(all) <- c('Congress', 'Full Name', 'State', 'born', 'died', 'Party', 'last_name', 'Member', 'sess_1', 'sess_2', 'age')
# Data prep for 'resignations' dataframe ----------------------------------------------------------
# Convert Congress value to numeric
convert_congress <- function(congress) {
return (as.numeric(gsub("([0-9]*).*","\\1", congress)))
}
resignations$Congress <- lapply(resignations$Congress, convert_congress)
# Filter congress to be greater than 109
resignations <- filter(resignations, Congress > 109)
# Get states
get_state <- function(district) {
split <- strsplit(district, '-') %>% unlist(.)
return (split[1])
}
resignations$District <- lapply(resignations$District, get_state)
resignations$State <- resignations$District
resignations$District <- NULL
# Separate categories if multiple
get_categories <- function(cat) {
cats <- strsplit(cat, ' & ') %>% unlist(.)
return (cats)
}
cats <- lapply(resignations$Category, get_categories)
for (i in 1:length(cats)) {
if (length(cats[[i]]) == 2) {
resignations$Category_1[i] <- cats[[i]][1]
resignations$Category_2[i] <- cats[[i]][2]
} else {
resignations$Category_1[i] <- cats[[i]][1]
resignations$Category_2[i] <- 'NA'
}
}
resignations$Category <- NULL
# Add years for each session
for (i in 1:nrow(resignations)) {
if (resignations$Congress[i] == 110) {
resignations$sess_1[i] <- 2007
resignations$sess_2[i] <- 2008
} else if (resignations$Congress[i] == 111) {
resignations$sess_1[i] <- 2009
resignations$sess_2[i] <- 2010
} else if (resignations$Congress[i] == 112) {
resignations$sess_1[i] <- 2011
resignations$sess_2[i] <- 2012
} else if (resignations$Congress[i] == 113) {
resignations$sess_1[i] <- 2013
resignations$sess_2[i] <- 2014
} else if (resignations$Congress[i] == 114) {
resignations$sess_1[i] <- 2015
resignations$sess_2[i] <- 2016
} else if (resignations$Congress[i] == 115) {
resignations$sess_1[i] <- 2017
resignations$sess_2[i] <- 2018
}
}
# Separate last names for identification
resignations$last_name <- lapply(resignations$Member,
function(name) { unlist(strsplit(name, ' '))[2] })
resignations$last_name <- tolower(resignations$last_name)
resignations$last_name <- lapply(resignations$last_name, simpleCap)
# Get year of resignation
resignations$year <- lapply(resignations$Resignation.Date,
function(date) { unlist(strsplit(date, '/'))[3] })
# Merge dataframes --------------------------------------------------------------------------------
# Identify members by last name, party, state, and congress
all <- as.data.frame(lapply(all, unlist))
resignations <- as.data.frame(lapply(resignations, unlist))
resignations <- merge(all, resignations, by='')
combined <- merge(all, resignations, by=c('Congress', 'State', 'Party', 'last_name'), all.x=TRUE)
# Remove unnecessary columns
combined$sess_1.y <- NULL
combined$sess_2.y <- NULL
combined$last_name <- NULL
# Check joined rows
sum(!is.na(combined$Reason))
resigned <- filter(combined, !is.na(Reason))
View(combined)
write.csv('congress_training_data.csv', row.names = FALSE)
write.csv(combined, 'congress_training_data.csv', row.names = FALSE)
